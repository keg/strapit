// Grid generator
// Created for the Strapit framework -- slight differences from 
// Boostrap's which is also included in the framework
// -------------------------------------------------------------


// Centered container element
// ------------------------------------------
// Head's up! Make sure maximum width is set later in a media query.
// IE8 box model will break if min- and max- widths are set on this element.
.make-container(@class-name: container) {
  position: relative;
  padding: 0 (@grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
  // Fix for nested containers
  .@{class-name} {
    width: auto !important;
  }
}

// Create a row
// ------------------------------------------
.make-rows(@gutter: @grid-gutter-width) {
  position: relative;
  width: auto;
  margin-left:  (@gutter / -2);
  margin-right: (@gutter / -2);
}

// Create targeted centered columns
// ------------------------------------------
.make-centered-columns(@class) {
  .col {
    .@{class}-centered {
       float: none !important;
       margin-left: auto;
       margin-right: auto;
     }
    .@{class}-uncentered  {
      float: left !important;
      margin-left: 0;
      margin-right: 0;
      &.opposite {
        float: right !important;
      }
    }
  }
}

// These four mixins create different parts of the grid
// ----------------------------------------------------

// Column width
.grid-calc(@index; @columns: @grid-columns; @class; @type) when (@type = width) and (@index > 0) {
  .@{class}-@{index} {
    width: round(percentage((@index / @columns)), 5);
  }
}

// Push source ordering
.grid-calc(@index; @columns: @grid-columns; @class; @type) when (@type = push) and (@index > 0) {
  .@{class}-push-@{index} {
    left: round(percentage((@index / @columns)), 5);
  }
}

// Pull source ordering
.grid-calc(@index; @columns: @grid-columns; @class; @type) when (@type = pull) and (@index > 0) {
  .@{class}-pull-@{index} {
    right: round(percentage((@index / @columns)), 5);
  }
}

// Offsets
.grid-calc(@index; @columns: @grid-columns; @class; @type) when (@type = offset) and (@index >= 0) {
  .@{class}-offset-@{index} {
    margin-left: round(percentage((@index / @columns)), 5);
  }
}

// THE LOOP 
// This mixin builds targeted classes one property at a time
.build-grid(@index; @columns: @grid-columns; @class; @type) when (@index > 0) {
  .grid-calc(@index; @columns; @class; @type);
  // next iteration
  .build-grid((@index - 1); @columns; @class; @type);
}

// Builds global push/pull, for when you don't need or want to source-ordering to a particular class
.build-source-ordering(@index, @columns: @grid-columns) when (@index > 0) {
  .col.push-@{index} {
    left: round(percentage((@index / @columns)), 5);
  }
  .col.pull-@{index} {
    right: round(percentage((@index / @columns)), 5);
  }
  // next iteration
  .build-source-ordering((@index - 1));
}

// Builds global offsets, for when you don't need or want to target offsets to a particular class
.build-offsets(@index, @columns: @grid-columns) when (@index >=0) {
  .col.offset-@{index} {
    margin-left: round(percentage((@index / @columns)), 5);
  }
  // next iteration
  .build-offsets((@index - 1));
}

// Full grid
// Build all targeted properties for a single class
.build-full-grid(@index; @columns: @grid-columns; @class) when (@index > 0) {
  .grid-calc(@index; @columns; @class; @type: width);
  .grid-calc(@index; @columns; @class; @type: offset);
  .grid-calc(@index; @columns; @class; @type: push);
  .grid-calc(@index; @columns; @class; @type: pull);

  // next iteration
  .build-full-grid((@index - 1); @columns; @class);
}

// Static grid
// Build a special static grid if you don't want a fluid one
.build-static-grid(@index) when (@index > 0) {
  .col-@{index} {
    &:extend(.col);
    width: round(percentage((@index / @grid-columns)), 5);
  }
  .offset-@{index} {
    margin-left: round(percentage((@index / @grid-columns)), 5);
  }
  .push-@{index} {
    left: round(percentage((@index / @grid-columns)), 5);
  }
  .pull-@{index} {
    right: round(percentage((@index / @grid-columns)), 5);
  }
  // next iteration
  .build-static-grid((@index - 1));
}